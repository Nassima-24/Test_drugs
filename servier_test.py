# -*- coding: utf-8 -*-
"""Servier test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v3XXRApP1vDw8zsvm5rSSM3cWPEnGnY5

#Data Pipeline

##Import packages
"""

import pandas as pd

"""##Load files in dataframes"""

#step 1 : loading csv files in dataframe
clinical_trials = pd.read_csv("./clinical_trials.csv",  header = 0)
drugs = pd.read_csv("./drugs.csv",  header = 0)
pubmed_csv = pd.read_csv("./pubmed.csv", header = 0) #Warning. Make sure to collect json files in the right format. We had to remove an incorrect comma by hand

#step 2 : loading json files in dataframe
pubmed_json = pd.read_json("./pubmed.json")

"""##Creation of functions"""

#create a new dataframe with pubmed csv and pubmed json files
def join_2df(df2=None,df3=None):
  """
  Create a new dataframe by joining 2 dataframes . 

  Args :
    df2 (DataFrame) : The dataframe to join. If no dataframe is passed, on is created by default.
    df3 (DataFrame) : The dataframe to join. If no dataframe is passed, on is created by default.
  """
  if df2 is None:
    df2 = pd.DataFrame()
  if df3 is None:
    df3 = pd.DataFrame()
  df1 = pd.concat([df2, df3])
  return df1

#add a column "Join" to a dataframe
def create_col(df=None):
  """
  Add a column of values = 1 to a dataframe. The column will be named "Join"

  Args :
    df (DataFrame) : The dataframe to update. If no dataframe is passed, on is created by default.
  """
  if df is None:
    df = pd.DataFrame()
  df['join']=1
  return df

#create a column of uppercase title to a dataframe
def upper_fc(df=None):
  """
  Add a column of uppercase title to a dataframe. The column will be named "upper_title"

  Args :
    df (DataFrame) : The dataframe to update. If no dataframe is passed, on is created by default.
  """
  if df is None:
    df = pd.DataFrame()
  df['upper_title'] = df.iloc[:,1].str.upper()
  return df

#add a new dataframe with matching records
def create_df(drugs,df3=None):
  """
  Create a new dataframe of 2 dataframes join with matching records (article title column vs drug column)

  Args :
    drugs (DataFrame) : The dataframe to join. If no dataframe is passed, on is created by default.
    df3 (DataFrame) : The dataframe to join. If no dataframe is passed, on is created by default.
  """
  if drugs is None:
    drugs = pd.DataFrame()
  if df3 is None:
    df3 = pd.DataFrame()
  df1 = drugs.merge(df3, on='join').drop('join', axis=1)
  df1['match'] = df1.apply(lambda x: x.upper_title.find(x.drug.upper()), axis=1).ge(0)
  df1 = df1[df1.match == True]
  return df1

#create a new json file
def create_json(df2=None,df3=None):
  """
  Create a new json file by joining 2 dataframes join. 

  Args :
    df1 (DataFrame) : The dataframe to create. If no dataframe is passed, on is created by default.
    df3 (DataFrame) : The dataframe to join. If no dataframe is passed, on is created by default.
  """
  if df2 is None:
    df2 = pd.DataFrame()
  if df3 is None:
    df3 = pd.DataFrame()
  df1 = pd.concat([df2, df3])
  df1 = df1[['drug', 'title','scientific_title' ,'date', 'journal']].to_json(orient = 'records')
  return df1

"""##Lauching functions"""

#reminder of the file names : pubmed_csv, pubmed_json, drugs, clinical_trials

#first we join these 2 pubmed files
pubmed = join_2df(pubmed_csv,pubmed_json)

#secondly we create a join column
create_col(clinical_trials)
create_col(pubmed)
create_col(drugs)

#then we create an uppercase title column
upper_fc(clinical_trials)
upper_fc(pubmed)

#also, we create a dataframe with the repertory of drugs in journals
clinic_trials_drug = create_df(drugs,clinical_trials)
pubmed_drug = create_df(drugs,pubmed)

#finally, we create a json file with the repertory of drugs in journals
journal_drug = create_json(clinic_trials_drug,pubmed_drug)


# Writing to sample.json
with open("./journal_drug.json", "w") as outfile:
    outfile.write(journal_drug)

"""#Annex"""

#The name of the newspaper that mentions the most different drugs
print("The name of the newspaper that mentions the most different drugs : ")
drugs_cat = pd.read_json(journal_drug)
count_drug_ref = pd.pivot_table(data=drugs_cat, index='journal', aggfunc=pd.Series.nunique)
print(count_drug_ref.index[count_drug_ref.drug == count_drug_ref.drug.max()])
